     
        
class Solution:
    def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        letters = list(s)
        instruction = compress_instructions(shifts)
        
        running_shift = 0
        for i in range(len(letters)):
            running_shift += instruction[i]
            old_letter = letters[i]
            new_letter = shift_letter(old_letter, running_shift)
            letters[i] = new_letter
        
        return "".join(letters)
            
        
        
def shift_letter(letter, steps):
    order = ord(letter)
    order_of_a = ord('a')
    
    human_order = order - order_of_a
    new_human_order = (human_order + steps) % 26
    new_order = order_of_a + new_human_order
    return chr(new_order)

def compress_instructions(shifts):
    instruction = defaultdict(int)
        
    for shift in shifts:
        print(shift)
        start_index = shift[0]
        end_index = shift[1]+1
        
        steps = None
        if shift[2] == 0:
            steps = -1
        elif shift[2] == 1:
            steps = 1
            
        
        instruction[start_index] += steps
        instruction[end_index] -= steps
            
    return instruction
    
#15
#2sub
